{
    "fileTypes": ["cql"],
    "name": "Clinical Quality Language",
    "scopeName": "source.cql",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#declarations"
        },
        {
            "include": "#definitionReferences"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#dateTime"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#types"
        },
        {
            "include": "#support"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.documentation.cql",
                    "begin": "/\\*\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "match": "@[a-zA-Z]+",
                            "name": "storage.type.class.jsdoc"
                        }
                    ]
                },
                {
                    "name": "comment.block.cql",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "match": "//.*$",
                    "name": "comment.line.double-slash.cql"
                }
            ]
        },
        "declarations": {
            "patterns": [
                {
                    "match": "\\b(define)\\s+(\"[^\"]+\")",
                    "captures": {
                        "1": {
                            "name": "keyword.control.cql"
                        },
                        "2": {
                            "name": "entity.name.function.cql"
                        }
                    }
                },
                {
                    "match": "\\b(library|using|include|called|version)\\b",
                    "name": "keyword.control.cql"
                },
                {
                    "match": "\\b(context|parameter|default)\\b",
                    "name": "keyword.control.cql"
                },
                {
                    "match": "\\b(codesystem|valueset|codesystems|code|concept)\\b",
                    "name": "keyword.control.cql"
                },
                {
                    "match": "\\b(define|public|private|fluent|function|external)\\b",
                    "name": "storage.modifier.cql"
                }
            ]
        },
        "definitionReferences": {
            "patterns": [
                {
                    "match": "(?<!\\[)\"([^\"]+)\"(?=\\s*(:|}|\\)|,|\\s|\\band\\b|\\bor\\b|\\bin\\b|\\bnot\\b|\\)\\s*(and|or)|$))",
                    "name": "entity.name.function.cql"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.cql",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "match": "\\\\([\\\\'\"]|[abfnrtv]|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2})",
                            "name": "constant.character.escape.cql"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.cql",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "match": "\\\\([\\\\'\"]|[abfnrtv]|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2})",
                            "name": "constant.character.escape.cql"
                        }
                    ]
                }
            ]
        },
        "dateTime": {
            "patterns": [
                {
                    "match": "@\\d{4}(-\\d{2}(-\\d{2})?)?T\\d{2}(:\\d{2}(:\\d{2}(\\.\\d+)?)?)?(Z|[+-]\\d{2}:\\d{2})?\\b",
                    "name": "constant.numeric.datetime.cql"
                },
                {
                    "match": "@\\d{4}(-\\d{2}(-\\d{2})?)?\\b",
                    "name": "constant.numeric.date.cql"
                },
                {
                    "match": "@T\\d{2}(:\\d{2}(:\\d{2}(\\.\\d+)?)?)?(Z|[+-]\\d{2}:\\d{2})?\\b",
                    "name": "constant.numeric.time.cql"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "match": "\\b(true|false|null)\\b",
                    "name": "constant.language.cql"
                },
                {
                    "match": "\\b\\d+[Ll]?\\b",
                    "name": "constant.numeric.integer.cql"
                },
                {
                    "match": "\\b\\d*\\.\\d+([eE][+-]?\\d+)?[Ll]?\\b",
                    "name": "constant.numeric.decimal.cql"
                },
                {
                    "match": "\\b\\d+[eE][+-]?\\d+[Ll]?\\b",
                    "name": "constant.numeric.scientific.cql"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\b(where|return|from|select|sort|by|if|end|case|when|then|else|exists|not exists)\\b",
                    "name": "keyword.control.flow"
                },
                {
                    "match": "\\b(and|or|xor|implies|not|not in)\\b",
                    "name": "keyword.operator.logical.cql"
                },
                {
                    "match": "\\b(distinct)\\b",
                    "name": "keyword.other.DML.cql"
                },
                {
                    "match": "\\b(count)\\b",
                    "name": "support.function.aggregate.cql"
                },
                {
                    "match": "\\b(in|contains|union|intersect|except)\\b",
                    "name": "keyword.operator.cql"
                },
                {
                    "match": "\\b(between|properly|starts|ends|during|included in|meets|overlaps|within|contains|same)\\b",
                    "name": "keyword.operator.cql"
                },
                {
                    "match": "\\b(start|end|width|successor|predecessor|point)\\b\\s+\\b(of)\\b",
                    "name": "keyword.operator.cql"
                },
                {
                    "match": "\\b(before|after|starts|ends)\\b",
                    "name": "keyword.operator.cql"
                },
                {
                    "match": "\\b(as|is|cast|convert|to)\\b",
                    "name": "keyword.operator.cql"
                },
                {
                    "match": "\\b(now)\\b",
                    "name": "keyword.operator.cql"
                },
                {
                    "match": "<=|>=|<|>|=|!=|~|!~",
                    "name": "keyword.operator.comparison.cql"
                },
                {
                    "match": "\\+|-|\\*|\\/|\\bdiv\\b|\\bmod\\b|\\^",
                    "name": "keyword.operator.arithmetic.cql"
                },
                {
                    "match": "&",
                    "name": "keyword.operator.cql"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "match": "\\b(ABS|ALLFALSE|ALLTRUE|ANYFALSE|ANYTRUE|AVG|COUNT|MAX|MEDIAN|MIN|MODE|POPULATION_STDDEV|POPULATION_VARIANCE|STDDEV|SUM|VARIANCE)\\b",
                    "name": "support.function.cql"
                },
                {
                    "match": "\\b(COMBINE|COLLAPSE|EXPAND|INTERSECT|UNION)\\b",
                    "name": "support.function.cql"
                },
                {
                    "match": "\\b([A-Za-z][A-Za-z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.cql"
                        }
                    }
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "match": "\\b(Boolean|Integer|Decimal|String|Date|DateTime|Time|Quantity|Ratio|Any)\\b",
                    "name": "support.type.primitive.cql"
                },
                {
                    "match": "\\b(Code|Concept|Interval|List|Tuple|Choice)\\b",
                    "name": "support.type.complex.cql"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "match": "\\$(this|index|total)",
                    "name": "variable.language.cql"
                },
                {
                    "match": "\\b(year|month|week|day|hour|minute|second|millisecond)s?\\b",
                    "name": "support.type.datetime.unit.cql"
                },
                {
                    "match": "\\b(Patient|Population|Encounter|Condition|Procedure|Medication|Observation)\\b",
                    "name": "support.class.cql"
                }
            ]
        }
    }
}